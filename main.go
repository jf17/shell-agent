package main

import (
	"bufio"
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"os/exec"
	"strings"
	"time"
)

// CommandHistory –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
type CommandHistory struct {
	Command string
	Result  string
}

// OllamaRequest —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Ollama API
type OllamaRequest struct {
	Model  string `json:"model"`
	Prompt string `json:"prompt"`
	Stream bool   `json:"stream"`
}

// OllamaResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Ollama API
type OllamaResponse struct {
	Response string `json:"response"`
	Done     bool   `json:"done"`
}

// Config —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
type Config struct {
	OllamaURL  string
	Model      string
	Timeout    time.Duration
	MaxHistory int
}

// ShellAgent –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–≥–µ–Ω—Ç–∞
type ShellAgent struct {
	commandHistory []CommandHistory
	config         Config
	client         *http.Client
}

// NewShellAgent —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–≥–µ–Ω—Ç–∞
func NewShellAgent() *ShellAgent {
	config := Config{
		OllamaURL:  "http://localhost:11434/api/generate",
		Model:      "qwen2.5-coder:3b",
		Timeout:    60 * time.Second,
		MaxHistory: 30,
	}
	
	return &ShellAgent{
		commandHistory: make([]CommandHistory, 0),
		config:         config,
		client: &http.Client{
			Timeout: config.Timeout,
		},
	}
}

// naturalLanguageToCommand –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫ –≤ –∫–æ–º–∞–Ω–¥—É Linux
func (sa *ShellAgent) naturalLanguageToCommand(query string) (string, error) {
	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
	contextInfo := ""
	if len(sa.commandHistory) > 0 {
		contextInfo = "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
		start := len(sa.commandHistory) - 3
		if start < 0 {
			start = 0
		}
		
		for i, cmd := range sa.commandHistory[start:] {
			contextInfo += fmt.Sprintf("%d. %s\n", i+1, cmd.Command)
		}
	}

	prompt := fmt.Sprintf(`–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –≤ –∫–æ–º–∞–Ω–¥—É Linux.
–£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è, –æ –∫–∞–∫–∏—Ö —Ñ–∞–π–ª–∞—Ö –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞—Ö –∏–¥–µ—Ç —Ä–µ—á—å.
–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –∫–æ–º–∞–Ω–¥–æ–π, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.

–ü—Ä–∏–º–µ—Ä—ã:
- "–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã" -> ls -la
- "–∫—Ç–æ —è" -> whoami  
- "—Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞" -> pwd
- "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ" -> uname -a
- "—Å–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å" -> free -h
- "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞" -> df -h
- "–∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã" -> ps aux
- "–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è" -> date
- "—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ test.txt" -> cat test.txt
- "–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .py" -> find . -name "*.py"
- "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª example.txt" -> touch example.txt
- "–ø–æ–∫–∞–∂–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞" (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è example.txt) -> cat example.txt

%s

–ó–∞–ø—Ä–æ—Å: %s

–ö–æ–º–∞–Ω–¥–∞:`, contextInfo, query)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
	reqBody := OllamaRequest{
		Model:  sa.config.Model,
		Prompt: prompt,
		Stream: false,
	}

	jsonData, err := json.Marshal(reqBody)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è JSON: %v", err)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := sa.client.Post(sa.config.OllamaURL, "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ollama: %v", err)
	}
	defer resp.Body.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
	if resp.StatusCode != http.StatusOK {
		return "", fmt.Errorf("Ollama –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
	}

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
	var ollamaResp OllamaResponse
	if err := json.NewDecoder(resp.Body).Decode(&ollamaResp); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	command := strings.TrimSpace(ollamaResp.Response)
	
	// –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
	if strings.HasPrefix(command, "```") {
		lines := strings.Split(command, "\n")
		if len(lines) > 1 {
			command = lines[1]
		}
	}
	command = strings.ReplaceAll(command, "```", "")
	
	return strings.TrimSpace(command), nil
}

// runShell –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É Linux
func (sa *ShellAgent) runShell(command string) string {
	if strings.TrimSpace(command) == "" {
		return "–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞"
	}

	ctx, cancel := context.WithTimeout(context.Background(), sa.config.Timeout)
	defer cancel()

	cmd := exec.CommandContext(ctx, "bash", "-c", command)
	
	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()
	
	var output []string
	
	if stdout.Len() > 0 {
		output = append(output, strings.TrimSpace(stdout.String()))
	}
	
	if stderr.Len() > 0 {
		if err != nil {
			output = append(output, fmt.Sprintf("–û—à–∏–±–∫–∞: %s", strings.TrimSpace(stderr.String())))
		} else {
			output = append(output, fmt.Sprintf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: %s", strings.TrimSpace(stderr.String())))
		}
	}

	if len(output) > 0 {
		return strings.Join(output, "\n")
	}
	
	if err != nil {
		return fmt.Sprintf("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v", err)
	}
	
	return "–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ (–Ω–µ—Ç –≤—ã–≤–æ–¥–∞)"
}

// showCommandHistory –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
func (sa *ShellAgent) showCommandHistory() {
	if len(sa.commandHistory) == 0 {
		fmt.Println("\nüìö –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞")
		return
	}

	fmt.Printf("\nüìö –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ (%d –∫–æ–º–∞–Ω–¥):\n", len(sa.commandHistory))
	fmt.Println(strings.Repeat("=", 60))

	for i, cmd := range sa.commandHistory {
		fmt.Printf("%d. %s\n", i+1, cmd.Command)
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤)
		shortResult := cmd.Result
		if len(shortResult) > 100 {
			shortResult = shortResult[:100] + "..."
		}
		fmt.Printf("   –†–µ–∑—É–ª—å—Ç–∞—Ç: %s\n", shortResult)
		fmt.Println(strings.Repeat("-", 40))
	}
}

// clearCommandHistory –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
func (sa *ShellAgent) clearCommandHistory() {
	sa.commandHistory = make([]CommandHistory, 0)
	fmt.Println("\nüóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω–∞")
}

// intelligentShellAgent –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
func (sa *ShellAgent) intelligentShellAgent(query string) string {
	fmt.Printf("\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: %s\n", query)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
	if len(sa.commandHistory) > 0 {
		contextSize := len(sa.commandHistory)
		if contextSize > 3 {
			contextSize = 3
		}
		fmt.Printf("üìö –ö–æ–Ω—Ç–µ–∫—Å—Ç: –ø–æ—Å–ª–µ–¥–Ω–∏–µ %d –∫–æ–º–∞–Ω–¥ –≤ –ø–∞–º—è—Ç–∏\n", contextSize)
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∫–æ–º–∞–Ω–¥—É —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	command, err := sa.naturalLanguageToCommand(query)
	if err != nil {
		return fmt.Sprintf("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: %v", err)
	}

	fmt.Printf("\nüí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞: %s\n", command)

	// –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
	reader := bufio.NewReader(os.Stdin)
	for {
		fmt.Print("\n‚ùì –í—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É? (–¥–∞/–Ω–µ—Ç/d/n): ")
		permission, _ := reader.ReadString('\n')
		permission = strings.TrimSpace(strings.ToLower(permission))

		if permission == "–¥–∞" || permission == "yes" || permission == "y" || permission == "d" || permission == "1" {
			fmt.Printf("\n‚ö° –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: %s\n", command)
			fmt.Println(strings.Repeat("-", 50))

			// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
			result := sa.runShell(command)

			// –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
			sa.commandHistory = append(sa.commandHistory, CommandHistory{
				Command: command,
				Result:  result,
			})

			// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
			if len(sa.commandHistory) > sa.config.MaxHistory {
				sa.commandHistory = sa.commandHistory[len(sa.commandHistory)-sa.config.MaxHistory:]
			}

			fmt.Printf("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç:\n%s\n", result)
			return result

		} else if permission == "–Ω–µ—Ç" || permission == "no" || permission == "n" || permission == "0" {
			fmt.Println("\n‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
			return "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
		} else {
			fmt.Println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç' (d/n)")
		}
	}
}

// interactiveMode –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –∞–≥–µ–Ω—Ç–æ–º
func (sa *ShellAgent) interactiveMode() {
	fmt.Println("ü§ñ –£–º–Ω—ã–π Linux Shell –ê–≥–µ–Ω—Ç")
	fmt.Println(strings.Repeat("=", 60))
	fmt.Println("–ê–≥–µ–Ω—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ –≤ –∫–æ–º–∞–Ω–¥—ã Linux")
	fmt.Println("–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º.")
	fmt.Println("\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
	fmt.Println("\n–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:")
	fmt.Println("- '–ø–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ'")
	fmt.Println("- '—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt'")
	fmt.Println("- '–ø–æ–∫–∞–∂–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞' (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞)")
	fmt.Println("- '–∫—Ç–æ —è –≤ —Å–∏—Å—Ç–µ–º–µ'")
	fmt.Println("- '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ'")
	fmt.Println("- '—Å–∫–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏'")
	fmt.Println("\n–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
	fmt.Println("- '–∏—Å—Ç–æ—Ä–∏—è' - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥")
	fmt.Println("- '–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é' - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
	fmt.Println(strings.Repeat("=", 60))

	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Print("\nüë§ –í–∞—à –∑–∞–ø—Ä–æ—Å: ")
		query, err := reader.ReadString('\n')
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞: %v\n", err)
			continue
		}

		query = strings.TrimSpace(query)

		if query == "" {
			fmt.Println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
			continue
		}

		lowerQuery := strings.ToLower(query)
		if lowerQuery == "exit" || lowerQuery == "quit" || lowerQuery == "–≤—ã—Ö–æ–¥" || lowerQuery == "–≤—ã–π—Ç–∏" {
			fmt.Println("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			break
		}

		// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
		if lowerQuery == "–∏—Å—Ç–æ—Ä–∏—è" || lowerQuery == "history" || lowerQuery == "–∫–æ–Ω—Ç–µ–∫—Å—Ç" {
			sa.showCommandHistory()
			continue
		} else if lowerQuery == "–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é" || lowerQuery == "clear history" || lowerQuery == "–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç" {
			sa.clearCommandHistory()
			continue
		}

		sa.intelligentShellAgent(query)
	}
}



// main –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
func main() {
	agent := NewShellAgent()
	agent.interactiveMode()
}